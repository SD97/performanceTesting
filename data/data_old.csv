Results
-
Table 1: Overview of Throughput, IPC, and Memory Allocation of the 3 implementations across all array sizes
--------------------------------------------------
```
Benchmark                                                                                    (arraySize)   Mode  Cnt           Score            Error      Units
blackScholes.TestJavaPerf.testScalarPerformance1                                                     256  thrpt    4      113578.670 ±       2094.141      ops/s
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.alloc.rate                                      256  thrpt    4           0.600 ±          0.013     MB/sec
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.alloc.rate.norm                                 256  thrpt    4           5.817 ±          0.225       B/op
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.count                                           256  thrpt    4           2.000                      counts
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.time                                            256  thrpt    4           5.000                          ms
blackScholes.TestJavaPerf.testScalarPerformance1:·ipc                                                256  thrpt                2.605                   insns/clk

blackScholes.TestJavaPerf.testScalarPerformance1                                                   25600  thrpt    4        1152.334 ±         13.452      ops/s
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.alloc.rate                                    25600  thrpt    4           0.599 ±          0.009     MB/sec
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.alloc.rate.norm                               25600  thrpt    4         572.409 ±         10.466       B/op
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.count                                         25600  thrpt    4           2.000                      counts
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.time                                          25600  thrpt    4           6.000                          ms
blackScholes.TestJavaPerf.testScalarPerformance1:·ipc                                              25600  thrpt                2.615                   insns/clk

blackScholes.TestJavaPerf.testScalarPerformance1                                                  256000  thrpt    4         114.829 ±          1.997      ops/s
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.alloc.rate                                   256000  thrpt    4           0.598 ±          0.007     MB/sec
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.alloc.rate.norm                              256000  thrpt    4        5729.708 ±        105.371       B/op
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.count                                        256000  thrpt    4           2.000                      counts
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.time                                         256000  thrpt    4           4.000                          ms
blackScholes.TestJavaPerf.testScalarPerformance1:·ipc                                             256000  thrpt                2.615                   insns/clk

blackScholes.TestJavaPerf.testScalarPerformance1                                                 2560000  thrpt    4          11.498 ±          0.165      ops/s
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.alloc.rate                                  2560000  thrpt    4           0.598 ±          0.008     MB/sec
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.alloc.rate.norm                             2560000  thrpt    4       57211.550 ±       1646.449       B/op
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.count                                       2560000  thrpt    4           2.000                      counts
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.time                                        2560000  thrpt    4           4.000                          ms
blackScholes.TestJavaPerf.testScalarPerformance1:·ipc                                            2560000  thrpt                2.600                   insns/clk

blackScholes.TestJavaPerf.testScalarPerformance1                                                25600000  thrpt    4           1.137 ±          0.015      ops/s
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.alloc.rate                                 25600000  thrpt    4           0.594 ±          0.001     MB/sec
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.alloc.rate.norm                            25600000  thrpt    4      573467.333 ±       7305.182       B/op
blackScholes.TestJavaPerf.testScalarPerformance1:·gc.count                                      25600000  thrpt    4             ≈ 0                      counts
blackScholes.TestJavaPerf.testScalarPerformance1:·ipc                                           25600000  thrpt                2.546                   insns/clk

blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths                                           256  thrpt    4       14258.993 ±        113.411      ops/s
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.alloc.rate                            256  thrpt    4         212.838 ±          1.685     MB/sec
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.alloc.rate.norm                       256  thrpt    4       16435.095 ±          0.406       B/op
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.count                                 256  thrpt    4          63.000                      counts
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.time                                  256  thrpt    4          46.000                          ms
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·ipc                                      256  thrpt                1.535                   insns/clk

blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths                                         25600  thrpt    4         143.970 ±          1.867      ops/s
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.alloc.rate                          25600  thrpt    4         214.894 ±          2.771     MB/sec
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.alloc.rate.norm                     25600  thrpt    4     1643457.187 ±         97.255       B/op
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.count                               25600  thrpt    4          62.000                      counts
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.time                                25600  thrpt    4          47.000                          ms
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·ipc                                    25600  thrpt                1.549                   insns/clk

blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths                                        256000  thrpt    4          14.375 ±          0.421      ops/s
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.alloc.rate                         256000  thrpt    4         214.611 ±          6.308     MB/sec
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.alloc.rate.norm                    256000  thrpt    4    16433810.731 ±       4225.389       B/op
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.count                              256000  thrpt    4          49.000                      counts
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.time                               256000  thrpt    4          41.000                          ms
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·ipc                                   256000  thrpt                1.539                   insns/clk

blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths                                       2560000  thrpt    4           1.436 ±          0.010      ops/s
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.alloc.rate                        2560000  thrpt    4         214.778 ±          1.360     MB/sec
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.alloc.rate.norm                   2560000  thrpt    4   164338276.533 ±       3355.149       B/op
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.count                             2560000  thrpt    4          52.000                      counts
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.time                              2560000  thrpt    4          52.000                          ms
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·ipc                                  2560000  thrpt                1.524                   insns/clk

blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths                                      25600000  thrpt    4           0.141 ±          0.012      ops/s
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.alloc.rate                       25600000  thrpt    4         213.297 ±         16.996     MB/sec
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.alloc.rate.norm                  25600000  thrpt    4  1643248793.000 ±     200104.454       B/op
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.count                            25600000  thrpt    4          16.000                      counts
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·gc.time                             25600000  thrpt    4          28.000                          ms
blackScholes.TestJavaPerf.testScalarPerformanceApacheMaths:·ipc                                 25600000  thrpt                1.520                   insns/clk

blackScholes.TestJavaPerf.testVectorPerformance                                                      256  thrpt    4      167116.295 ±       7417.966      ops/s
blackScholes.TestJavaPerf.testVectorPerformance:·gc.alloc.rate                                       256  thrpt    4        5284.966 ±        234.486     MB/sec
blackScholes.TestJavaPerf.testVectorPerformance:·gc.alloc.rate.norm                                  256  thrpt    4       34821.240 ±          0.203       B/op
blackScholes.TestJavaPerf.testVectorPerformance:·gc.count                                            256  thrpt    4         368.000                      counts
blackScholes.TestJavaPerf.testVectorPerformance:·gc.time                                             256  thrpt    4         460.000                          ms
blackScholes.TestJavaPerf.testVectorPerformance:·ipc                                                 256  thrpt                2.305                   insns/clk

blackScholes.TestJavaPerf.testVectorPerformance                                                    25600  thrpt    4        1714.237 ±         82.479      ops/s
blackScholes.TestJavaPerf.testVectorPerformance:·gc.alloc.rate                                     25600  thrpt    4        5421.257 ±        260.489     MB/sec
blackScholes.TestJavaPerf.testVectorPerformance:·gc.alloc.rate.norm                                25600  thrpt    4     3482113.967 ±         24.860       B/op
blackScholes.TestJavaPerf.testVectorPerformance:·gc.count                                          25600  thrpt    4         377.000                      counts
blackScholes.TestJavaPerf.testVectorPerformance:·gc.time                                           25600  thrpt    4         476.000                          ms
blackScholes.TestJavaPerf.testVectorPerformance:·ipc                                               25600  thrpt                2.386                   insns/clk

blackScholes.TestJavaPerf.testVectorPerformance                                                   256000  thrpt    4         172.234 ±         24.801      ops/s
blackScholes.TestJavaPerf.testVectorPerformance:·gc.alloc.rate                                    256000  thrpt    4        5446.997 ±        784.411     MB/sec
blackScholes.TestJavaPerf.testVectorPerformance:·gc.alloc.rate.norm                               256000  thrpt    4    34821037.967 ±        573.140       B/op
blackScholes.TestJavaPerf.testVectorPerformance:·gc.count                                         256000  thrpt    4         355.000                      counts
blackScholes.TestJavaPerf.testVectorPerformance:·gc.time                                          256000  thrpt    4         452.000                          ms
blackScholes.TestJavaPerf.testVectorPerformance:·ipc                                              256000  thrpt                2.351                   insns/clk

blackScholes.TestJavaPerf.testVectorPerformance                                                  2560000  thrpt    4          16.856 ±          1.342      ops/s
blackScholes.TestJavaPerf.testVectorPerformance:·gc.alloc.rate                                   2560000  thrpt    4        5331.237 ±        422.649     MB/sec
blackScholes.TestJavaPerf.testVectorPerformance:·gc.alloc.rate.norm                              2560000  thrpt    4   348212025.850 ±       9355.237       B/op
blackScholes.TestJavaPerf.testVectorPerformance:·gc.count                                        2560000  thrpt    4         370.000                      counts
blackScholes.TestJavaPerf.testVectorPerformance:·gc.time                                         2560000  thrpt    4         473.000                          ms
blackScholes.TestJavaPerf.testVectorPerformance:·ipc                                             2560000  thrpt                2.300                   insns/clk

blackScholes.TestJavaPerf.testVectorPerformance                                                 25600000  thrpt    4           1.694 ±          0.012      ops/s
blackScholes.TestJavaPerf.testVectorPerformance:·gc.alloc.rate                                  25600000  thrpt    4        5358.064 ±         36.065     MB/sec
blackScholes.TestJavaPerf.testVectorPerformance:·gc.alloc.rate.norm                             25600000  thrpt    4  3482036188.000 ±      38179.237       B/op
blackScholes.TestJavaPerf.testVectorPerformance:·gc.count                                       25600000  thrpt    4         128.000                      counts
blackScholes.TestJavaPerf.testVectorPerformance:·gc.time                                        25600000  thrpt    4         178.000                          ms
blackScholes.TestJavaPerf.testVectorPerformance:·ipc                                            25600000  thrpt                2.316                   insns/clk
```
Table 2: Overview of the CPU performance using the Perf profiler (Scalar) - 256000 sized array (1 iteration example taken)
--------------------------------------------------
          22735.01 msec task-clock:u              #    0.521 CPUs utilized          
                 0      context-switches:u        #    0.000 K/sec                  
                 0      cpu-migrations:u          #    0.000 K/sec                  
              9004      page-faults:u             #    0.396 K/sec                  
       97414746300      cycles:u                  #    4.285 GHz                      (40.47%)
          74938341      stalled-cycles-frontend:u #    0.08% frontend cycles idle     (41.36%)
          99534516      stalled-cycles-backend:u  #    0.10% backend cycles idle      (41.79%)
      148480226128      instructions:u            #    1.52  insn per cycle         
                                                  #    0.00  stalled cycles per insn  (42.34%)
       20816666459      branches:u                #  915.622 M/sec                    (42.67%)
          32116629      branch-misses:u           #    0.15% of all branches          (43.01%)
       47562376024      L1-dcache-loads:u         # 2092.032 M/sec                    (41.92%)
         317240438      L1-dcache-load-misses:u   #    0.67% of all L1-dcache accesses  (41.25%) 
         567004365      L1-icache-loads:u         #   24.940 M/sec                    (40.76%)
           2839402      L1-icache-load-misses:u   #    0.50% of all L1-icache accesses  (39.86%)
          30011897      dTLB-loads:u              #    1.320 M/sec                    (39.67%)
           3588233      dTLB-load-misses:u        #   11.96% of all dTLB cache accesses  (39.34%)
           3612450      iTLB-loads:u              #    0.159 M/sec                    (39.45%)
           1094667      iTLB-load-misses:u        #   30.30% of all iTLB cache accesses  (39.69%)
         172762504      L1-dcache-prefetches:u    #    7.599 M/sec                    (39.72%)

Table 3: Overview of the CPU performance using the Perf profiler (Scalar with Apache maths) - 256000 sized array (1 iteration example taken)
--------------------------------------------------

          22735.01 msec task-clock:u              #    0.521 CPUs utilized          
                 0      context-switches:u        #    0.000 K/sec                  
                 0      cpu-migrations:u          #    0.000 K/sec                  
              9004      page-faults:u             #    0.396 K/sec                  
       97414746300      cycles:u                  #    4.285 GHz                      (40.47%)
          74938341      stalled-cycles-frontend:u #    0.08% frontend cycles idle     (41.36%)
          99534516      stalled-cycles-backend:u  #    0.10% backend cycles idle      (41.79%)
      148480226128      instructions:u            #    1.52  insn per cycle         
                                                  #    0.00  stalled cycles per insn  (42.34%)
       20816666459      branches:u                #  915.622 M/sec                    (42.67%)
          32116629      branch-misses:u           #    0.15% of all branches          (43.01%)
       47562376024      L1-dcache-loads:u         # 2092.032 M/sec                    (41.92%)
         317240438      L1-dcache-load-misses:u   #    0.67% of all L1-dcache accesses  (41.25%) 
         567004365      L1-icache-loads:u         #   24.940 M/sec                    (40.76%)
           2839402      L1-icache-load-misses:u   #    0.50% of all L1-icache accesses  (39.86%)
          30011897      dTLB-loads:u              #    1.320 M/sec                    (39.67%)
           3588233      dTLB-load-misses:u        #   11.96% of all dTLB cache accesses  (39.34%)
           3612450      iTLB-loads:u              #    0.159 M/sec                    (39.45%)
           1094667      iTLB-load-misses:u        #   30.30% of all iTLB cache accesses  (39.69%)
         172762504      L1-dcache-prefetches:u    #    7.599 M/sec                    (39.72%)

Table 4: Overview of the CPU performance using the Perf profiler (Vector)  - 256000 sized array (1 iteration example taken)
--------------------------------------------------

          22605.27 msec task-clock:u              #    0.534 CPUs utilized          
                 0      context-switches:u        #    0.000 K/sec                  
                 0      cpu-migrations:u          #    0.000 K/sec                  
             11210      page-faults:u             #    0.496 K/sec                  
       89401108579      cycles:u                  #    3.955 GHz                      (40.36%)
         217370442      stalled-cycles-frontend:u #    0.24% frontend cycles idle     (41.72%)
         202340204      stalled-cycles-backend:u  #    0.23% backend cycles idle      (42.88%)
      203863173349      instructions:u            #    2.28  insn per cycle         
                                                  #    0.00  stalled cycles per insn  (43.83%)
       24049493330      branches:u                # 1063.889 M/sec                    (44.21%)
          37912060      branch-misses:u           #    0.16% of all branches          (44.93%)
       75072246502      L1-dcache-loads:u         # 37 M/sec                    (43.76%)
        2712585424      L1-dcache-load-misses:u   #    3.61% of all L1-dcache accesses  (42.58%) 
         734224320      L1-icache-loads:u         #   32.480 M/sec                    (41.64%)
           5115763      L1-icache-load-misses:u   #    0.70% of all L1-icache accesses  (40.56%)
          42715155      dTLB-loads:u              #    1.890 M/sec                    (39.98%)
          14381688      dTLB-load-misses:u        #   33.67% of all dTLB cache accesses  (39.27%)
           4527809      iTLB-loads:u              #   321.00 0.200 M/sec                    (38.43%)
           1796290      iTLB-load-misses:u        #   39.67% of all iTLB cache accesses  (38.38%)
        2479389093      L1-dcache-prefetches:u    #  109.682 M/sec                    (38.77%)


Analysis
- 
- Basic Terminology:
  - 
    - Memory allocation rate - the rate (MB/S) of memory being used inside the Young Gen (Which is part of the JVM heap)
        - The Young Gen is split by Eden, S0, S1.
        - The GC of the Young Gen is defined as Minor GC. You have your "Old Mem" and major GC, both of which are still part of the heap mem
        - So the allocation rates here refer to young gen here
        - Online, it seems < 1GB/second is fine. Remember that the rate of CPU's from its cache is VERY fast/high bandwith, and ~25GB for a Zen3 core I believe
    - IPC refers to Instructions Per Cycle, i.e. for each CPU cycle, how many instructions are executed for a given cycle
        - This is important to
- Why are these important?
    - Memory allocation rates are important because the more memory being allocated,the more GC tends to be done
        - GC pauses threads while it collects garbage/not used objects - introducing latency and potentially stutter
        - In order to have millisecond level optimization -> ensure your application is not destroying the GC
    - IPC is important because we need to understand the impact of vectorization on the CPU to fully understand it
        - Additionally, if we can figure out how cache-heavy our application is, we can choose more suitable processing environments
        -
- Overall Performance and IPC
  - 
    - We see that the vector implementation is faster than both scalar implementations across every array size
        - Seems to scale linearly with array size for vector and scalar1 implementation
        - Vector implementation is roughly only 1.5x faster than the first scalar implementation across all array sizes, but much faster than the
          apache maths scalar implementation
    - When we compare IPC across implementations, the first scalar and vector implementation have similar IPC
        - On average they are at ~2.6 and ~2.3
        - However, the apache maths has a lower IPC at 1.5
        - The vector implementation does seem to have similar if slighltly more instructions than the scalar, but apache maths has much less instructions
- Memory Allocation/Pressure
  - 
    - Looking at memory allocation characteristics, Vector Black scholes has much higher allocation rate than either scalar implementation
    - Roughly it seems to be ~5GB/second which is higher than reccomended online value, while the others are well below <200MB/S
    - This implies that lots of objects are being created on the heap, specifically the Eden space.
    - When doing vectorization, we're creating these DoubleVectors within the loop method. This generates objects for each loop cycle (complex ones)
    - This results in big stack/big eden memories I assume
    - Increasing Eden Memory decreased GC count and time significantly, (less than half the time allocated to GC)
- General Concerns
  - 
    - These results were run on a Ryzen 5800X. As a result, I am only using 256 bit width vectors, allowing for processing up
      to 4 doubles at once. For a fixed number of instructions then, and given the same CPU frequency, we would expect the
      speedup to be at a theoretical 4x between the vector and scalar1
    - However, there are a few reasons why this may not be achieved
        - JVM does autovectorization so it's not truly scalar vs vector
        - There are differences in IPC, clock speed and # of instructons that could play a role
        - GC slowing down vectorization?
        - Are we really using the correct instructions? Fairly certain we are
